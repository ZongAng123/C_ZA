//
//  main.m
//  C_ZA
//
//  Created by 纵昂 on 2021/8/8.
//

#import <Foundation/Foundation.h>

int main(int argc, const char * argv[]) {
    @autoreleasepool {
        // insert code here...
        NSLog(@"Hello, World!");
        
        
#pragma mark - 第三章 最简单的C程序设计-顺序生程序设计
        /*
         为了能编写出C语言程序，必须具备以下的知识和能力:
         (1),要有正确的解题思路，即学会设计算法，否则无从下手。
         (2),掌握C语言的语法，知道怎样使用C语言正确所提供的功能编写出一个完整的、正确的程序。也就是在设计好算法之后，能用C语言正确表示此算法。
         (3),在写算法和编写程序时，要采用结构化程序设计方法，编写出结构化的程序。
         */
        
#pragma mark - 3.1 顺序程序设计举例
/*
 例 3.1 有人用温度计测量出用华氏法表示的温度(如69度F),今要求把它转换为以摄氏法表示的温度(如20度C)。
 解题思路:这个问题的算法的关键，在于找出二者之间的转换公式。根据物理学知识，知道以下转换公式:
 */
        
//        定义f和c为单精度浮点型变量
        float f,c;
//        指定f的值
        f = 64.0;
//        利用公式计算C的值
        c = (5.0/9) * (f-32);
//        输出c的值
        printf("转换结果:f=%f\nc=%f\n",f,c);
        
        
        
/*
 例 3.2 计算存款利息,有1000元,想存一年。有三种方法可选:
   (1)活期,年利率为r1;
   (2)一年期定期,年利率为r2;
   (3)存两次半年定期,年利率为r3。请分别计算出一年后按3种方法所得到的本息和。
 
 解题思路:确定计算本息的公式，数学知识可知，若存款额为p0时,则:
 活期存款一年后本息和为p1=p0(1+r1)。
 一年期定期存款，一年后本息和为p2=p0(1+r2)。
 两次半年定期存款，一年后本息和为p3=p0(1+2分之r3)(1+2分之r3)
 
 */
        
//      定义变量
        float p0 = 1000, r1 = 0.0036, r2 = 0.0225, r3=0.0198,p1,p2,p3;
//        计算活期本息和
        p1 = p0 * (1+r1);
//        计算一年定期定期本息和
        p2 = p0 * (1+r2);
//        计算存款两次半年定期的本息和
        p3 = p0 * (1+r3/2) * (1+r3/2);
//        输出结果
        printf("本息计算结果:p1=%f\np2=%f\np3=%f\n",p1,p2,p3);
        
        
        
#pragma mark - 3.2 数据的表现形式及其运算
//      有了以上写程序的基础，本节怼程序中最基本的成分作必要的介绍。
 
#pragma mark - 3.2.1  常量和变量
/*
 在计算机高级语言中，数据有两种表现形式:常量和变量。
 */
        
#pragma mark - 1、常量
/*
  在程序运行过程中，其值不能被改变的量量成为常量。例如3、1，程序中的5、9、32和例3.2程序中的1000，0.0036是常量。数值常量就是数学中的常数。
 常用的常量有以下几类:
 (1),整形常量。如1000、12345、0、-345等都是整形常量。
 (2),实型常量。
 (3),字符常量。
 (4),字符串常量。如"boy","123"等,用双撇号把若干个字符括起来,字符穿常量是双撇号中的全部字符。
 (5),符号常量。用#define指令，指定用一个符号名称代表一个常量。如下:
  #define PI 3.1416   //注意行末没有分号
 经过以上的指定后，本文件中从此行开始所有的PI都代表1.1416。
 
 */
        
        
#pragma mark - 2、变量
/*
如 例3.1程序中的c,f和3.2程序中的p0,p1,p2,p3,r1,r2等是变量。变量代表一个有名字的、具有特定属性 一个存储单元。也就是存放变量的值。在程序运行期间,变量的值是可以改变的。
 */
        
#pragma mark - 3、常变量
/*
 C允许使用常变量,如:
 const int a = 3;
 表示a被定义为一个整型变量,指定其值为3,而且在变量存在期间其值不能改变。
 常量与常变量的异同是:常变量具有变量的基本属性:有类型,占存储单元,只是不允许改变其值。可以说,常变量是有名字的不变量,而常量是没有名字的不变量。有名字就便于在程序中被引用。
 */
        
#pragma mark - 4、标识符
/*
 在计算机高级语言中，用来对变量、符号常量名、函数、数组、类型等命名的有效字符序列统称为标识符(identifier)。简单地说，标识符就是一个对象的名字。前面用到的变量名p1,p2,c,f,符号常量名PI,PRICE,函数名printf等都是标识符。
 */
        
#pragma mark -3.2.2 数据类型
/*
 C语言允许使用类型见图3.4，图中标红是C所增加的。
 */
      
        
#pragma mark -3.2.3 整型数据
#pragma mark - 1、整型数据的分类
/*
 (1)、基本整型(int型)
 (2)、短整型(short int)
 (3)、长整型(long int)
 (4)、双长整型(long long int)
 */
#pragma mark - 2、整型变量的符号属性
/*
 以上介绍的几种类型，变量值在存储单元中都以补码形式存储的，存储单元中的第一个二进制代表符号。整型变量的值的范围包括负数到正数(见表3.2)
 */
#pragma mark -3.2.4 字符型数据
/*
 由于字符是按其代码(整数)形式存储的，因此C把字符型数据作为整数类型的一种。但是，这种字符型数据在使用上有自己的特点，因此把它单独列为一节来介绍。
 */
        
        
#pragma mark - 1、字符与字符代码
        
         
    }
    return 0;
}
